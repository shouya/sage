
module Sage
  grammar Sage
    rule single_expression
      space? expression space? { def parse; elements[1].parse; end }
    end

    rule paired_expression
      space? name space? expression space? !expression {
         def parse; elements.values_at(1,3).map(&:parse); end } /
      space? lambda space? expression space? !expression {
         def parse; elements.values_at(1,3).map(&:parse); end } /
      space? '(' expression ')' space? expression space? !expression {
         def parse; elements.values_at(2,5).map(&:parse); end } /
      space? expression space? expression space? {
         def parse; elements.values_at(1,3).map(&:parse); end }
    end

    rule expression
      '(' expression ')' !applicants <ParenthesesNode> /
      lambda / application / name
    end

    rule partial_expr
      '(' expression ')' <ParenthesesNode> / lambda / name
    end

    rule applicants
      (space? partial_expr)+
    end

    rule application
      partial_expr applicants  <ApplicationNode>
    end
    rule lambda
      lambda_indicator space? name space? dot space? expression <LambdaNode>
    end

    rule name
      [a-z]+ <IdentifierNode>
    end

    rule lambda_indicator
      '\\'
    end
    rule space
      [\s\n\r\t]+
    end
    rule dot
      "."
    end
  end
end
